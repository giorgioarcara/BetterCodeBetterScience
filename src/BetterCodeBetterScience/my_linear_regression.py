import numpy as np

def _validate_input(X, y):
    if np.isinf(X).any() or np.isinf(y).any():
        raise ValueError("Input data contains infinite values")
    if np.isnan(X).any() or np.isnan(y).any():
        raise ValueError("Input data contains NaN values")
    if len(np.unique(X)) < 2 or len(np.unique(y)) < 2:
        raise ValueError("Input data must have at least 2 unique values")

    X_with_intercept = np.c_[np.ones(X.shape[0]), X]
    if np.linalg.matrix_rank(X_with_intercept) < X_with_intercept.shape[1]:
        raise ValueError("Input data is not full rank")


# code generated by Copilot
def linear_regression(X, y):
    """
    Perform linear regression using the normal equation.

    This function computes the parameters of a linear regression model using
    the normal equation method. It automatically adds an intercept term to
    the input data.

    Parameters
    ----------
    X : np.ndarray
        The input data matrix of shape (n_samples, n_features).
    y : np.ndarray
        The target vector of shape (n_samples,).

    Returns
    -------
    np.ndarray
        The parameters of the linear regression model, where the first element
        is the intercept and subsequent elements are the coefficients for each
        feature.

    Raises
    ------
    Exception
        If input data contains infinite or NaN values, has insufficient unique
        values, or is not full rank.

    Examples
    --------
    >>> import numpy as np
    >>> X = np.array([[1], [2], [3], [4]])
    >>> y = np.array([2, 4, 6, 8])
    >>> beta = linear_regression(X, y)
    >>> print(beta)  # Should be approximately [0, 2] for y = 2*x
    """

    _validate_input(X, y)

    # Add a column of ones to the input data to account for the intercept term
    X_with_intercept = np.c_[np.ones(X.shape[0]), X]

    # Compute the parameters using the normal equation
    X_transpose = X_with_intercept.T
    X_transpose_X = X_transpose @ X_with_intercept
    X_transpose_y = X_transpose @ y
    beta = np.linalg.inv(X_transpose_X) @ X_transpose_y

    return beta
